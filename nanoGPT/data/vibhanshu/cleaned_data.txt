getting started axios docs english português brasileiro deutsch 中文 українська کوردی español français türkçe 한국어 tiếng việt فارسی русский arabic 日本語 getting started introduction example post requests axios api axios api the axios instance request config response schema config defaults interceptors handling errors cancellation urlencoding bodies multipart bodies other notes contributors code of conduct collaborator guide contributing to axios translating these docs getting started promise based http client for the browser and nodejs what is axios axios is a promisebased http client for nodejs and the browser it is isomorphic it can run in the browser and nodejs with the same codebase on the serverside it uses the native nodejs http module while on the client browser it uses xmlhttprequests features make xmlhttprequests from the browser make http requests from nodejs supports the promise api intercept request and response transform request and response data cancel requests timeouts query parameters serialization with support for nested entries automatic request body serialization to json applicationjson multipart formdata multipartformdata url encoded form applicationxwwwformurlencoded posting html forms as json automatic json data handling in response progress capturing for browsers and nodejs with extra info speed rate remaining time setting bandwidth limits for nodejs compatible with speccompliant formdata and blob including nodejs client side support for protecting against xsrf installing using npm npm install axios using bower bower install axios using yarn yarn add axios using jsdelivr cdn script src httpscdnjsdelivrnetnpmaxiosdistaxiosminjs script using unpkg cdn script src httpsunpkgcomaxiosdistaxiosminjs script prebuilt commonjs modules for direct importing with require if your module bundler failed to resolve them automatically const axios require axiosdistbrowseraxioscjs browser const axios require axiosdistnodeaxioscjs node next minimal example html express nodejs web application framework black lives matter support the equal justice initiative express home getting started installing hello world express generator basic routing static files more examples faq guide routing writing middleware using middleware overriding the express api using template engines error handling debugging express behind proxies moving to express 4 moving to express 5 database integration api reference 5x beta 4x 3x deprecated 2x deprecated advanced topics template engines process managers security updates security best practices performance best practices health checks and graceful shutdown resources community glossary template engines middleware utility modules frameworks companies using express opensource projects additional learning contributing to express release change log express 4181 fast unopinionated minimalist web framework for nodejs npm install express save express 50 beta documentation is now available the beta api documentation is a work in progress for information on whats in the release see the express release history web applications express is a minimal and flexible nodejs web application framework that provides a robust set of features for web and mobile applications apis with a myriad of http utility methods and middleware at your disposal creating a robust api is quick and easy performance express provides a thin layer of fundamental web application features without obscuring nodejs features that you know and love frameworks many popular frameworks are based on express documentation translations provided by strongloopibm french german spanish italian japanese russian chinese traditional chinese korean portuguese community translation available for slovak ukrainian uzbek turkish and thai star express is a project of the openjs foundation fork the website on github copyright 2017 strongloop ibm and other expressjscom contributors this work is licensed under a creative commons attributionsharealike 30 united states license html javascript mdn skip to main content skip to search skip to select language mdn web docs open main menu references references overview web technology web technology reference for developers html structure of content on the web css code used to describe document style javascript generalpurpose scripting language http protocol for transmitting web resources web apis interfaces for building web applications web extensions developing extensions for web browsers web technology web technology reference for developers guides guides overview mdn learning area learn web development mdn learning area learn web development html learn to structure web content with html css learn to style content using css javascript learn to run scripts in the browser accessibility learn to make the web accessible to all plus plus overview a customized mdn experience ai help beta get realtime assistance and support updates all browser compatibility updates at a glance documentation learn how to use mdn plus faq frequently asked questions about mdn plus blog play ai help beta search mdn clear search input search theme log in sign up for free references javascript article actions english us filter sidebar clear filter input in this article tutorials reference javascript tutorials complete beginners javascript basics javascript first steps javascript building blocks introducing javascript objects javascript guide introduction grammar and types control flow and error handling loops and iteration functions expressions and operators numbers and dates text formatting regular expressions indexed collections keyed collections working with objects using classes using promises javascript typed arrays iterators and generators meta programming javascript modules intermediate clientside javascript frameworks clientside web apis language overview javascript data structures equality comparisons and sameness enumerability and ownership of properties closures advanced inheritance and the prototype chain memory management concurrency model and event loop references builtin objects overview aggregateerror array arraybuffer asyncfunction asyncgenerator asyncgeneratorfunction asynciterator atomics bigint bigint64array biguint64array boolean dataview date decodeuri decodeuricomponent encodeuri encodeuricomponent error escape deprecated eval evalerror finalizationregistry float32array float64array function generator generatorfunction globalthis infinity int16array int32array int8array internalerror nonstandard intl isfinite isnan iterator json map math nan number object parsefloat parseint promise proxy rangeerror referenceerror reflect regexp set sharedarraybuffer string symbol syntaxerror typedarray typeerror uint16array uint32array uint8array uint8clampedarray undefined unescape deprecated urierror weakmap weakref weakset expressions operators overview addition addition assignment assignment async function expression async function expression await bitwise and bitwise and assignment bitwise not bitwise or bitwise or assignment bitwise xor bitwise xor assignment class expression comma operator conditional ternary operator decrement delete destructuring assignment division division assignment equality exponentiation exponentiation assignment function expression function expression greater than greater than or equal grouping operator importmeta import in increment inequality instanceof left shift left shift assignment less than less than or equal logical and logical and assignment logical not logical or logical or assignment multiplication multiplication assignment new newtarget null nullish coalescing assignment nullish coalescing operator object initializer operator precedence optional chaining property accessors remainder remainder assignment right shift right shift assignment spread syntax strict equality strict inequality subtraction subtraction assignment super this typeof unary negation unary plus unsigned right shift unsigned right shift assignment void operator yield yield statements declarations overview async function async function block statement break class const continue debugger dowhile empty statement export expression statement for for awaitof forin forof function function ifelse import labeled statement let return switch throw trycatch var while with deprecated functions overview arrow function expressions default parameters get method definitions rest parameters set the arguments object classes overview constructor extends private properties public class fields static static initialization blocks regular expressions overview backreference 1 2 capturing group character class escape d d w w s s character class character escape n u disjunction input boundary assertion literal character a b lookahead assertion lookbehind assertion named backreference kname named capturing group name noncapturing group quantifier n n nm unicode character class escape p p wildcard word boundary assertion b b errors overview error permission denied to access property x internalerror too much recursion rangeerror argument is not a valid code point rangeerror bigint division by zero rangeerror bigint negative exponent rangeerror invalid array length rangeerror invalid date rangeerror precision is out of range rangeerror radix must be an integer rangeerror repeat count must be less than infinity rangeerror repeat count must be nonnegative rangeerror x cant be converted to bigint because it isnt an integer referenceerror x is not defined referenceerror assignment to undeclared variable x referenceerror cant access lexical declaration x before initialization referenceerror deprecated caller or arguments usage referenceerror reference to undefined property x syntaxerror 0prefixed octal literals and octal escape seq are deprecated syntaxerror use strict not allowed in function with nonsimple parameters syntaxerror x is a reserved identifier syntaxerror a declaration in the head of a forof loop cant have an initializer syntaxerror applying the delete operator to an unqualified name is deprecated syntaxerror await is only valid in async functions async generators and modules syntaxerror cannot use unparenthesized within and expressions syntaxerror continue must be inside loop syntaxerror forin loop head declarations may not have initializers syntaxerror function statement requires a name syntaxerror getter and setter for private name x should either be both static or nonstatic syntaxerror identifier starts immediately after numeric literal syntaxerror illegal character syntaxerror invalid assignment lefthand side syntaxerror invalid bigint syntax syntaxerror invalid regular expression flag x syntaxerror jsonparse bad parsing syntaxerror label not found syntaxerror missing before statement syntaxerror missing after property id syntaxerror missing after argument list syntaxerror missing after condition syntaxerror missing after element list syntaxerror missing after function body syntaxerror missing after property list syntaxerror missing in const declaration syntaxerror missing formal parameter syntaxerror missing name after operator syntaxerror missing variable name syntaxerror redeclaration of formal parameter x syntaxerror return not in function syntaxerror test for equality mistyped as assignment syntaxerror unexpected used outside of class body syntaxerror unexpected token syntaxerror unlabeled break must be inside loop or switch syntaxerror unparenthesized unary expression cant appear on the lefthand side of syntaxerror unterminated string literal syntaxerror using to indicate sourceurl pragmas is deprecated use instead typeerror x is not iterable typeerror x has no properties typeerror x is not y typeerror x is not a constructor typeerror x is not a function typeerror x is not a nonnull object typeerror x is readonly typeerror cant assign to property x on y not an object typeerror cant convert bigint to number typeerror cant convert x to bigint typeerror cant define property x obj is not extensible typeerror cant delete nonconfigurable array element typeerror cant redefine nonconfigurable property x typeerror cannot use in operator to search for x in y typeerror cyclic object value typeerror invalid instanceof operand x typeerror invalid arrayprototypesort argument typeerror invalid assignment to const x typeerror more arguments needed typeerror property x is nonconfigurable and cant be deleted typeerror reduce of empty array with no initial value typeerror setting getteronly property x typeerror xprototypey called on incompatible type urierror malformed uri sequence warning file is being assigned a sourcemappingurl but already has one warning unreachable code after return statement misc javascript technologies overview lexical grammar iteration protocols strict mode template literals trailing commas deprecated features in this article tutorials reference javascript javascript js is a lightweight interpreted or justintime compiled programming language with firstclass functions while it is most wellknown as the scripting language for web pages many nonbrowser environments also use it such as nodejs apache couchdb and adobe acrobat javascript is a prototypebased multiparadigm singlethreaded dynamic language supporting objectoriented imperative and declarative eg functional programming styles javascripts dynamic capabilities include runtime object construction variable parameter lists function variables dynamic script creation via eval object introspection via forin and object utilities and sourcecode recovery javascript functions store their source text and can be retrieved through tostring this section is dedicated to the javascript language itself and not the parts that are specific to web pages or other host environments for information about apis that are specific to web pages please see web apis and dom the standards for javascript are the ecmascript language specification ecma262 and the ecmascript internationalization api specification ecma402 as soon as one browser implements a feature we try to document it this means that cases where some proposals for new ecmascript features have already been implemented in browsers documentation and examples in mdn articles may use some of those new features most of the time this happens between the stages 3 and 4 and is usually before the spec is officially published do not confuse javascript with the java programming language â javascript is not interpreted java both java and javascript are trademarks or registered trademarks of oracle in the us and other countries however the two programming languages have very different syntax semantics and use javascript documentation of core language features pure ecmascript for the most part includes the following the javascript guide the javascript reference for more information about javascript specifications and related technologies see javascript technologies overview looking to become a frontend web developer we have put together a course that includes all the essential information you need to work towards your goal get started tutorials learn how to program in javascript with guides and tutorials for complete beginners head over to our learning area javascript topic if you want to learn javascript but have no previous experience with javascript or programming the complete modules available there are as follows javascript first steps answers some fundamental questions such as what is javascript what does it look like and what can it do along with discussing key javascript features such as variables strings numbers and arrays javascript building blocks continues our coverage of javascripts key fundamental features turning our attention to commonlyencountered types of code blocks such as conditional statements loops functions and events introducing javascript objects the objectoriented nature of javascript is important to understand if you want to go further with your knowledge of the language and write more efficient code therefore weve provided this module to help you asynchronous javascript discusses asynchronous javascript why it is important and how it can be used to effectively handle potential blocking operations such as fetching resources from a server clientside web apis explores what apis are and how to use some of the most common apis youll come across often in your development work javascript guide javascript guide a much more detailed guide to the javascript language aimed at those with previous programming experience either in javascript or another language intermediate understanding clientside javascript frameworks javascript frameworks are an essential part of modern frontend web development providing developers with proven tools for building scalable interactive web applications this module gives you some fundamental background knowledge about how clientside frameworks work and how they fit into your toolset before moving on to a series of tutorials covering some of todays most popular ones javascript language overview an overview of the basic syntax and semantics of javascript for those coming from other programming languages to get up to speed javascript data structures overview of available data structures in javascript equality comparisons and sameness javascript provides three different value comparison operations strict equality using loose equality using and the objectis method enumerability and ownership of properties how different methods that visit a group of object properties onebyone handle the enumerability and ownership of properties closures a closure is the combination of a function and the lexical environment within which that function was declared advanced inheritance and the prototype chain explanation of the widely misunderstood and underestimated prototypebased inheritance memory management memory life cycle and garbage collection in javascript the event loop javascript has a runtime model based on an event loop reference browse the complete javascript reference documentation standard objects get to know standard builtin objects array boolean date error function json math number object regexp string map set weakmap weakset and others expressions and operators learn more about the behavior of javascripts operators instanceof typeof new this the operator precedence and more statements and declarations learn how dowhile forin forof trycatch let var const ifelse switch and more javascript statements and keywords work functions learn how to work with javascripts functions to develop your applications classes javascript classes are the most appropriate way to do objectoriented programming found a content problem with this page edit the page on github report the content issue view the source on github want to get more involved learn how to contribute this page was last modified on sep 25 2023 by mdn contributors mdn logo your blueprint for a better internet mdn on mastodon mdn on twitter mdn on github mdn blog rss feed mdn about blog careers advertise with us support product help report an issue our communities mdn community mdn forum mdn chat developers web technologies learn web development mdn plus hacks blog mozilla logo website privacy notice cookies legal community participation guidelines visit mozilla corporationâs notforprofit parent the mozilla foundation portions of this content are â1998â 2024 by individual mozillaorg contributors content available under a creative commons license html mongoose v813 schemas mongoose mongoose version 813 version 768 version 6126 version 51322 quick start guides schemas schematypes connections models documents subdocuments queries validation middleware populate discriminators plugins timestamps transactions typescript api mongoose schema connection document model query aggregate schematype virtualtype migration guide version compatibility version support faq further reading for enterprise sponsors schemas if you havent yet done so please take a minute to read the quickstart to get an idea of how mongoose works if you are migrating from 7x to 8x please take a moment to read the migration guide defining your schema creating a model ids instance methods statics query helpers indexes virtuals aliases options with es6 classes pluggable further reading defining your schema everything in mongoose starts with a schema each schema maps to a mongodb collection and defines the shape of the documents within that collection import mongoose from mongoose const schema mongoose const blogschema new schema title string string is shorthand for type string author string body string comments body string date date date type date default date now hidden boolean meta votes number favs number if you want to add additional keys later use the schemaadd method each key in our code blogschema defines a property in our documents which will be cast to its associated schematype for example weve defined a property title which will be cast to the string schematype and property date which will be cast to a date schematype notice above that if a property only requires a type it can be specified using a shorthand notation contrast the title property above with the date property keys may also be assigned nested objects containing further keytype definitions like the meta property above this will happen whenever a keys value is a pojo that doesnt have a type property in these cases mongoose only creates actual schema paths for leaves in the tree like metavotes and metafavs above and the branches do not have actual paths a sideeffect of this is that meta above cannot have its own validation if validation is needed up the tree a path needs to be created up the tree see the subdocuments section for more information on how to do this also read the mixed subsection of the schematypes guide for some gotchas the permitted schematypes are string number date buffer boolean mixed objectid array decimal128 map uuid read more about schematypes here schemas not only define the structure of your document and casting of properties they also define document instance methods static model methods compound indexes and document lifecycle hooks called middleware creating a model to use our schema definition we need to convert our blogschema into a model we can work with to do so we pass it into mongoosemodelmodelname schema const blog mongoose model blog blogschema ready to go ids by default mongoose adds an _id property to your schemas const schema new schema schema path _id objectid when you create a new document with the automatically added _id property mongoose creates a new _id of type objectid to your document const model mongoose model test schema const doc new model doc _id instanceof mongoose types objectid true you can also overwrite mongooses default _id with your own _id just be careful mongoose will refuse to save a toplevel document that doesnt have an _id so youre responsible for setting _id if you define your own _id path const schema new schema _id number overwrite mongooses default _id const model mongoose model test schema const doc new model await doc save throws document must have an _id before saving doc _id 1 await doc save works mongoose also adds an _id property to subdocuments you can disable the _id property on your subdocuments as follows mongoose does allow saving subdocuments without an _id property const nestedschema new schema name string _id false disable _id const schema new schema subdoc nestedschema docarray nestedschema const test mongoose model test schema neither subdoc nor docarray0 will have an _id await test create subdoc name test 1 docarray name test 2 alternatively you can disable _id using the following syntax const nestedschema new schema _id false disable _id name string instance methods instances of models are documents documents have many of their own builtin instance methods we may also define our own custom document instance methods define a schema const animalschema new schema name string type string assign a function to the methods object of our animalschema through schema options by following this approach there is no need to create a separate ts type to define the type of the instance functions methods findsimilartypes cb return mongoose model animal find type this type cb or assign a function to the methods object of our animalschema animalschema methods findsimilartypes function cb return mongoose model animal find type this type cb now all of our animal instances have a findsimilartypes method available to them const animal mongoose model animal animalschema const dog new animal type dog dog findsimilartypes err dogs console log dogs woof overwriting a default mongoose document method may lead to unpredictable results see this for more details the example above uses the schemamethods object directly to save an instance method you can also use the schemamethod helper as described here do not declare methods using es6 arrow functions arrow functions explicitly prevent binding this so your method will not have access to the document and the above examples will not work statics you can also add static functions to your model there are three equivalent ways to add a static add a function property to the second argument of the schemaconstructor statics add a function property to schemastatics call the schemastatic function define a schema const animalschema new schema name string type string assign a function to the statics object of our animalschema through schema options by following this approach there is no need to create a separate ts type to define the type of the statics functions statics findbyname name return this find name new regexp name i or assign a function to the statics object of our animalschema animalschema statics findbyname function name return this find name new regexp name i or equivalently you can call animalschemastatic animalschema static findbybreed function breed return this find breed const animal mongoose model animal animalschema let animals await animal findbyname fido animals animals concat await animal findbybreed poodle do not declare statics using es6 arrow functions arrow functions explicitly prevent binding this so the above examples will not work because of the value of this query helpers you can also add query helper functions which are like instance methods but for mongoose queries query helper methods let you extend mongooses chainable query builder api define a schema const animalschema new schema name string type string assign a function to the query object of our animalschema through schema options by following this approach there is no need to create a separate ts type to define the type of the query functions query byname name return this where name new regexp name i or assign a function to the query object of our animalschema animalschema query byname function name return this where name new regexp name i const animal mongoose model animal animalschema animal find byname fido exec err animals console log animals animal findone byname fido exec err animal console log animal indexes mongodb supports secondary indexes with mongoose we define these indexes within our schema at the path level or the schema level defining indexes at the schema level is necessary when creating compound indexes const animalschema new schema name string type string tags type string index true path level animalschema index name 1 type 1 schema level see schematypeindex for other index options when your application starts up mongoose automatically calls createindex for each defined index in your schema mongoose will call createindex for each index sequentially and emit an index event on the model when all the createindex calls succeeded or when there was an error while nice for development it is recommended this behavior be disabled in production since index creation can cause a significant performance impact disable the behavior by setting the autoindex option of your schema to false or globally on the connection by setting the option autoindex to false mongoose connect mongodbuserpass127001portdatabase autoindex false or mongoose createconnection mongodbuserpass127001portdatabase autoindex false or mongoose set autoindex false or animalschema set autoindex false or new schema autoindex false mongoose will emit an index event on the model when indexes are done building or an error occurred will cause an error because mongodb has an _id index by default that is not sparse animalschema index _id 1 sparse true const animal mongoose model animal animalschema animal on index error _id index cannot be sparse console log error message see also the modelensureindexes method virtuals virtuals are document properties that you can get and set but that do not get persisted to mongodb the getters are useful for formatting or combining fields while setters are useful for decomposing a single value into multiple values for storage define a schema const personschema new schema name first string last string compile our model const person mongoose model person personschema create a document const axl new person name first axl last rose suppose you want to print out the persons full name you could do it yourself console log axl name first axl name last axl rose but concatenating the first and last name every time can get cumbersome and what if you want to do some extra processing on the name like removing diacritics a virtual property getter lets you define a fullname property that wont get persisted to mongodb that can be done either by adding it to schema options const personschema new schema name first string last string virtuals fullname get return this name first this name last or by using the virtual method as following personschema virtual fullname get function return this name first this name last now mongoose will call your getter function every time you access the fullname property console log axl fullname axl rose if you use tojson or toobject mongoose will not include virtuals by default pass virtuals true to tojson or toobject to include virtuals convert doc to a pojo with virtuals attached doc toobject virtuals true equivalent doc tojson virtuals true the above caveat for tojson also includes the output of calling jsonstringify on a mongoose document because jsonstringify calls tojson to include virtuals in jsonstringify output you can either call toobject virtuals true on the document before calling jsonstringify or set the tojson virtuals true option on your schema explicitly add virtuals to jsonstringify output json stringify doc toobject virtuals true or to automatically attach virtuals to jsonstringify output const personschema new schema name first string last string tojson virtuals true include virtuals in jsonstringify you can also add a custom setter to your virtual that will let you set both first name and last name via the fullname virtual again that can be done either by adding it to schema options const personschema new schema name first string last string virtuals fullname get return this name first this name last set v this name first v substr 0 v indexof this name last v substr v indexof 1 or by using the virtual method as following personschema virtual fullname get function return this name first this name last set function v this name first v substr 0 v indexof this name last v substr v indexof 1 axl fullname william rose now axlnamefirst is william virtual property setters are applied before other validation so the example above would still work even if the first and last name fields were required only nonvirtual properties work as part of queries and for field selection since virtuals are not stored in mongodb you cant query with them you can learn more about virtuals here aliases aliases are a particular type of virtual where the getter and setter seamlessly get and set another property this is handy for saving network bandwidth so you can convert a short property name stored in the database into a longer name for code readability const personschema new schema n type string now accessing name will get you the value of n and setting name will set the value of n alias name setting name will propagate to n const person new person name val console log person n val console log person toobject virtuals true n val name val console log person name val person name not val console log person n not val you can also declare aliases on nested paths it is easier to use nested schemas and subdocuments but you can also declare nested path aliases inline as long as you use the full nested path nestedmyprop as the alias const childschema new schema n type string alias name _id false const parentschema new schema if in a child schema alias doesnt need to include the full nested path c childschema name f type string alias needs to include the full nested path if declared inline alias namefirst options schemas have a few configurable options which can be passed to the constructor or to the set method new schema options or const schema new schema schema set option value valid options autoindex autocreate buffercommands buffertimeoutms capped collection discriminatorkey excludeindexes id _id minimize read writeconcern shardkey statics strict strictquery tojson toobject typekey validatebeforesave versionkey optimisticconcurrency collation timeseries selectpopulatedpaths skipversioning timestamps storesubdocvalidationerror collectionoptions methods query autosearchindex option autoindex by default mongooses init function creates all the indexes defined in your models schema by calling modelcreateindexes after you successfully connect to mongodb creating indexes automatically is great for development and test environments but index builds can also create significant load on your production database if you want to manage indexes carefully in production you can set autoindex to false const schema new schema autoindex false const clock mongoose model clock schema clock ensureindexes callback the autoindex option is set to true by default you can change this default by setting mongoosesetautoindex false option autocreate before mongoose builds indexes it calls modelcreatecollection to create the underlying collection in mongodb by default calling createcollection sets the collections default collation based on the collation option and establishes the collection as a capped collection if you set the capped schema option you can disable this behavior by setting autocreate to false using mongoosesetautocreate false like autoindex autocreate is helpful for development and test environments but you may want to disable it for production to avoid unnecessary database calls unfortunately createcollection cannot change an existing collection for example if you add capped size 1024 to your schema and the existing collection is not capped createcollection will not overwrite the existing collection that is because the mongodb server does not allow changing a collections options without dropping the collection first const schema new schema name string autocreate false capped size 1024 const test mongoose model test schema noop if collection already exists even if the collection is not capped this means that capped wont be applied if the tests collection already exists await test createcollection option buffercommands by default mongoose buffers commands when the connection goes down until the driver manages to reconnect to disable buffering set buffercommands to false const schema new schema buffercommands false the schema buffercommands option overrides the global buffercommands option mongoose set buffercommands true schema option below overrides the above if the schema option is set const schema new schema buffercommands false option buffertimeoutms if buffercommands is on this option sets the maximum amount of time mongoose buffering will wait before throwing an error if not specified mongoose will use 10000 10 seconds if an operation is buffered for more than 1 second throw an error const schema new schema buffertimeoutms 1000 option capped mongoose supports mongodbs capped collections to specify the underlying mongodb collection be capped set the capped option to the maximum size of the collection in bytes new schema capped 1024 the capped option may also be set to an object if you want to pass additional options like max in this case you must explicitly pass the size option which is required new schema capped size 1024 max 1000 autoindexid true option collection mongoose by default produces a collection name by passing the model name to the utilstocollectionname method this method pluralizes the name set this option if you need a different name for your collection const dataschema new schema collection data option discriminatorkey when you define a discriminator mongoose adds a path to your schema that stores which discriminator a document is an instance of by default mongoose adds an __t path but you can set discriminatorkey to overwrite this default const baseschema new schema discriminatorkey type const basemodel mongoose model test baseschema const personschema new schema name string const personmodel basemodel discriminator person personschema const doc new personmodel name james t kirk without discriminatorkey mongoose would store the discriminator key in __t instead of type doc type person option excludeindexes when excludeindexes is true mongoose will not create indexes from the given subdocument schema this option only works when the schema is used in a subdocument path or document array path mongoose ignores this option if set on the toplevel schema for a model defaults to false const childschema1 schema name type string index true const childschema2 schema name type string index true excludeindexes true mongoose will create an index on child1name but not child2name because excludeindexes is true on childschema2 const user new schema name type string index true child1 childschema1 child2 childschema2 option id mongoose assigns each of your schemas an id virtual getter by default which returns the documents _id field cast to a string or in the case of objectids its hexstring if you dont want an id getter added to your schema you may disable it by passing this option at schema construction time default behavior const schema new schema name string const page mongoose model page schema const p new page name mongodborg console log p id 50341373e894ad16347efe01 disabled id const schema new schema name string id false const page mongoose model page schema const p new page name mongodborg console log p id undefined option _id mongoose assigns each of your schemas an _id field by default if one is not passed into the schema constructor the type assigned is an objectid to coincide with mongodbs default behavior if you dont want an _id added to your schema at all you may disable it using this option you can only use this option on subdocuments mongoose cant save a document without knowing its id so you will get an error if you try to save a document without an _id default behavior const schema new schema name string const page mongoose model page schema const p new page name mongodborg console log p _id 50341373e894ad16347efe01 name mongodborg disabled _id const childschema new schema name string _id false const parentschema new schema children childschema const model mongoose model model parentschema model create children name luke error doc docchildren0_id will be undefined option minimize mongoose will by default minimize schemas by removing empty objects const schema new schema name string inventory const character mongoose model character schema will store inventory field if it is not empty const frodo new character name frodo inventory ringofpower 1 await frodo save let doc await character findone name frodo lean doc inventory ringofpower 1 will not store inventory field if it is empty const sam new character name sam inventory await sam save doc await character findone name sam lean doc inventory undefined this behavior can be overridden by setting minimize option to false it will then store empty objects const schema new schema name string inventory minimize false const character mongoose model character schema will store inventory if empty const sam new character name sam inventory await sam save doc await character findone name sam lean doc inventory to check whether an object is empty you can use the isempty helper const sam new character name sam inventory samisempty inventory true sam inventory barrowblade 1 samisempty inventory false option read allows setting queryread options at the schema level providing us a way to apply default readpreferences to all queries derived from a model const schema new schema read primary also aliased as p const schema new schema read primarypreferred aliased as pp const schema new schema read secondary aliased as s const schema new schema read secondarypreferred aliased as sp const schema new schema read nearest aliased as n the alias of each pref is also permitted so instead of having to type out secondarypreferred and getting the spelling wrong we can simply pass sp the read option also allows us to specify tag sets these tell the driver from which members of the replicaset it should attempt to read read more about tag sets here and here note you may also specify the driver read preference strategy option when connecting pings the replset members periodically to track network latency const options replset strategy ping mongoose connect uri options const schema new schema read nearest disk ssd mongoose model jellybean schema option writeconcern allows setting write concern at the schema level const schema new schema name string writeconcern w majority j true wtimeout 1000 option shardkey the shardkey option is used when we have a sharded mongodb architecture each sharded collection is given a shard key which must be present in all insertupdate operations we just need to set this schema option to the same shard key and well be all set new schema shardkey tag 1 name 1 note that mongoose does not send the shardcollection command for you you must configure your shards yourself option strict the strict option enabled by default ensures that values passed to our model constructor that were not specified in our schema do not get saved to the db const thingschema new schema const thing mongoose model thing thingschema const thing new thing iamnotintheschema true thing save iamnotintheschema is not saved to the db set to false const thingschema new schema strict false const thing new thing iamnotintheschema true thing save iamnotintheschema is now saved to the db this also affects the use of docset to set a property value const thingschema new schema const thing mongoose model thing thingschema const thing new thing thing set iamnotintheschema true thing save iamnotintheschema is not saved to the db this value can be overridden at the model instance level by passing a second boolean argument const thing mongoose model thing const thing new thing doc true enables strict mode const thing new thing doc false disables strict mode the strict option may also be set to throw which will cause errors to be produced instead of dropping the bad data note any keyval set on the instance that does not exist in your schema is always ignored regardless of schema option const thingschema new schema const thing mongoose model thing thingschema const thing new thing thing iamnotintheschema true thing save iamnotintheschema is never saved to the db option strictquery mongoose supports a separate strictquery option to avoid strict mode for query filters this is because empty query filters cause mongoose to return all documents in the model which can cause issues const myschema new schema field number strict true const mymodel mongoose model test myschema mongoose will filter out notinschema 1 because strict true meaning this query will return _all_ documents in the tests collection mymodel find notinschema 1 the strict option does apply to updates the strictquery option is just for query filters mongoose will strip out notinschema from the update if strict is not false mymodel updatemany set notinschema 1 mongoose has a separate strictquery option to toggle strict mode for the filter parameter to queries const myschema new schema field number strict true strictquery false turn off strict mode for query filters const mymodel mongoose model test myschema mongoose will not strip out notinschema 1 because strictquery is false mymodel find notinschema 1 in general we do not recommend passing userdefined objects as query filters dont do this const docs await mymodel find req query do this instead const docs await mymodel find name req query name age req query age setoptions sanitizefilter true in mongoose 7 strictquery is false by default however you can override this behavior globally set strictquery to true to omit unknown fields in queries mongoose set strictquery true option tojson exactly the same as the toobject option but only applies when the documents tojson method is called const schema new schema name string schema path name get function v return v is my name schema set tojson getters true virtuals false const m mongoose model person schema const m new m name max headroom console log m toobject _id 504e0cd7dd992d9be2f20b6f name max headroom console log m tojson _id 504e0cd7dd992d9be2f20b6f name max headroom is my name since we know tojson is called whenever a js object is stringified console log json stringify m _id 504e0cd7dd992d9be2f20b6f name max headroom is my name to see all available tojsontoobject options read this option toobject documents have a toobject method which converts the mongoose document into a plain javascript object this method accepts a few options instead of applying these options on a perdocument basis we may declare the options at the schema level and have them applied to all of the schemas documents by default to have all virtuals show up in your consolelog output set the toobject option to getters true const schema new schema name string schema path name get function v return v is my name schema set toobject getters true const m mongoose model person schema const m new m name max headroom console log m _id 504e0cd7dd992d9be2f20b6f name max headroom is my name to see all available toobject options read this option typekey by default if you have an object with key type in your schema mongoose will interpret it as a type declaration mongoose interprets this as loc is a string const schema new schema loc type string coordinates number however for applications like geojson the type property is important if you want to control which key mongoose uses to find type declarations set the typekey schema option const schema new schema mongoose interprets this as loc is an object with 2 keys type and coordinates loc type string coordinates number mongoose interprets this as name is a string name type string typekey type a type key means this object is a type declaration option validatebeforesave by default documents are automatically validated before they are saved to the database this is to prevent saving an invalid document if you want to handle validation manually and be able to save objects which dont pass validation you can set validatebeforesave to false const schema new schema name string schema set validatebeforesave false schema path name validate function value return value null const m mongoose model person schema const m new m name null m validate function err console log err will tell you that null is not allowed m save succeeds despite being invalid option versionkey the versionkey is a property set on each document when first created by mongoose this keys value contains the internal revision of the document the versionkey option is a string that represents the path to use for versioning the default is __v if this conflicts with your application you can configure as such const schema new schema name string const thing mongoose model thing schema const thing new thing name mongoose v3 await thing save __v 0 name mongoose v3 customized versionkey new schema versionkey _somethingelse const thing mongoose model thing schema const thing new thing name mongoose v3 thing save _somethingelse 0 name mongoose v3 note that mongooses default versioning is not a full optimistic concurrency solution mongooses default versioning only operates on arrays as shown below 2 copies of the same document const doc1 await model findone _id const doc2 await model findone _id delete first 3 comments from doc1 doc1 comments splice 0 3 await doc1 save the below save will throw a versionerror because youre trying to modify the comment at index 1 and the above splice removed that comment doc2 set comments1body new comment await doc2 save if you need optimistic concurrency support for save you can set the optimisticconcurrency option document versioning can also be disabled by setting the versionkey to false do not disable versioning unless you know what you are doing new schema versionkey false const thing mongoose model thing schema const thing new thing name no versioning please thing save name no versioning please mongoose only updates the version key when you use save if you use update findoneandupdate etc mongoose will not update the version key as a workaround you can use the below middleware schema pre findoneandupdate function const update this getupdate if update __v null delete update __v const keys set setoninsert for const key of keys if updatekey null updatekey __v null delete updatekey __v if object keys updatekey length 0 delete updatekey update inc update inc update inc __v 1 option optimisticconcurrency optimistic concurrency is a strategy to ensure the document youre updating didnt change between when you loaded it using find or findone and when you update it using save for example suppose you have a house model that contains a list of photos and a status that represents whether this house shows up in searches suppose that a house that has status approved must have at least two photos you might implement the logic of approving a house document as shown below async function markapproved id const house await house findone _id if house photos length 2 throw new error house must have at least two photos house status approved await house save the markapproved function looks right in isolation but there might be a potential issue what if another function removes the houses photos between the findone call and the save call for example the below code will succeed const house await house findone _id if house photos length 2 throw new error house must have at least two photos const house2 await house findone _id house2 photos await house2 save marks the house as approved even though it has 0 photos house status approved await house save if you set the optimisticconcurrency option on the house models schema the above script will throw an error const house mongoose model house schema status string photos string optimisticconcurrency true const house await house findone _id if house photos length 2 throw new error house must have at least two photos const house2 await house findone _id house2 photos await house2 save throws versionerror no matching document found for id version 0 house status approved await house save option collation sets a default collation for every query and aggregation heres a beginnerfriendly overview of collations const schema new schema name string collation locale en_us strength 1 const mymodel db model mymodel schema mymodel create name val name val then return mymodel find name val then docs docs will contain both docs because strength 1 means mongodb will ignore case when matching option timeseries if you set the timeseries option on a schema mongoose will create a timeseries collection for any model that you create from that schema const schema schema name string timestamp date metadata object timeseries timefield timestamp metafield metadata granularity hours autocreate false expireafterseconds 86400 test collection will be a timeseries collection const test db model test schema option skipversioning skipversioning allows excluding paths from versioning ie the internal revision will not be incremented even if these paths are updated do not do this unless you know what youre doing for subdocuments include this on the parent document using the fully qualified path new schema skipversioning dontversionme true thing dontversionme push hey thing save version is not incremented option timestamps the timestamps option tells mongoose to assign createdat and updatedat fields to your schema the type assigned is date by default the names of the fields are createdat and updatedat customize the field names by setting timestampscreatedat and timestampsupdatedat the way timestamps works under the hood is if you create a new document mongoose simply sets createdat and updatedat to the time of creation if you update a document mongoose will add updatedat to the set object if you set upsert true on an update operation mongoose will use setoninsert operator to add createdat to the document in case the upsert operation resulted into a new inserted document const thingschema new schema timestamps createdat created_at const thing mongoose model thing thingschema const thing new thing await thing save created_at updatedat will be included with updates mongoose will add updatedat to set await thing updateone set name test if you set upsert true mongoose will add created_at to setoninsert as well await thing findoneandupdate set name test2 mongoose also adds timestamps to bulkwrite operations see httpsmongoosejscomdocsapimodelhtmlmodel_modelbulkwrite await thing bulkwrite insertone document name jeanluc picard ship uss stargazer mongoose will add created_at and updatedat updateone filter name jeanluc picard update set ship uss enterprise mongoose will add updatedat by default mongoose uses new date to get the current time if you want to overwrite the function mongoose uses to get the current time you can set the timestampscurrenttime option mongoose will call the timestampscurrenttime function whenever it needs to get the current time const schema schema createdat number updatedat number name string make mongoose use unix time seconds since jan 1 1970 timestamps currenttime math floor date now 1000 option plugintags mongoose supports defining global plugins plugins that apply to all schemas add a meta property to all schemas mongoose plugin function myplugin schema schema add meta sometimes you may only want to apply a given plugin to some schemas in that case you can add plugintags to a schema const schema1 new schema name string plugintags usemetaplugin const schema2 new schema name string if you call plugin with a tags option mongoose will only apply that plugin to schemas that have a matching entry in plugintags add a meta property to all schemas mongoose plugin function myplugin schema schema add meta tags usemetaplugin option selectpopulatedpaths by default mongoose will automatically select any populated paths for you unless you explicitly exclude them const bookschema new schema title string author type objectid ref person const book mongoose model book bookschema by default mongoose will add author to the below select await book find select title populate author in other words the below query is equivalent to the above await book find select title author populate author to opt out of selecting populated fields by default set selectpopulatedpaths to false in your schema const bookschema new schema title string author type objectid ref person selectpopulatedpaths false const book mongoose model book bookschema because selectpopulatedpaths is false the below doc will not contain an author property const doc await book findone select title populate author option storesubdocvalidationerror for legacy reasons when there is a validation error in subpath of a single nested schema mongoose will record that there was a validation error in the single nested schema path as well for example const childschema new schema name type string required true const parentschema new schema child childschema const parent mongoose model parent parentschema will contain an error for both childname _and_ child new parent child validatesync errors set the storesubdocvalidationerror to false on the child schema to make mongoose only reports the parent error const childschema new schema name type string required true storesubdocvalidationerror false set on the child schema const parentschema new schema child childschema const parent mongoose model parent parentschema will only contain an error for childname new parent child validatesync errors option collectionoptions options like collation and capped affect the options mongoose passes to mongodb when creating a new collection mongoose schemas support most mongodb createcollection options but not all you can use the collectionoptions option to set any createcollection options mongoose will use collectionoptions as the default values when calling createcollection for your schema const schema new schema name string autocreate false collectionoptions capped true max 1000 const test mongoose model test schema equivalent to createcollection capped true max 1000 await test createcollection option autosearchindex similar to autoindex except for automatically creates any atlas search indexes defined in your schema unlike autoindex this option defaults to false const schema new schema name string autosearchindex true schema searchindex name myindex definition mappings dynamic true will automatically attempt to create the myindex search index const test mongoose model test schema with es6 classes schemas have a loadclass method that you can use to create a mongoose schema from an es6 class es6 class methods become mongoose methods es6 class statics become mongoose statics es6 getters and setters become mongoose virtuals heres an example of using loadclass to create a schema from an es6 class class myclass mymethod return 42 static mystatic return 42 get myvirtual return 42 const schema new mongoose schema schema loadclass myclass console log schema methods mymethod function mymethod console log schema statics mystatic function mystatic console log schema virtuals myvirtual virtualtype pluggable schemas are also pluggable which allows us to package up reusable features into plugins that can be shared with the community or just between your projects further reading heres an alternative introduction to mongoose schemas to get the most out of mongodb you need to learn the basics of mongodb schema design sql schema design third normal form was designed to minimize storage costs whereas mongodb schema design is about making common queries as fast as possible the 6 rules of thumb for mongodb schema design blog series is an excellent resource for learning the basic rules for making your queries fast users looking to master mongodb schema design in nodejs should look into the little mongodb schema design book by christian kvalheim the original author of the mongodb nodejs driver this book shows you how to implement performant schemas for a laundry list of use cases including ecommerce wikis and appointment bookings next up now that weve covered schemas lets take a look at schematypes localize full stack engineer anywhere view more jobshtml docs nextjs skip to content search documentation search k showcase docs blog analytics templates enterprise search documentation search k feedback learn menu using app router features available in app getting started installation project structure building your application routing defining routes pages and layouts linking and navigating loading ui and streaming error handling redirecting route groups project organization dynamic routes parallel routes intercepting routes route handlers middleware internationalization data fetching fetching caching and revalidating server actions and mutations data fetching patterns and best practices rendering server components client components composition patterns edge and nodejs runtimes caching styling css modules tailwind css cssinjs sass optimizing images videos fonts metadata scripts bundle analyzer lazy loading analytics instrumentation opentelemetry static assets third party libraries configuring typescript eslint environment variables absolute imports and module path aliases mdx src directory draft mode content security policy testing vitest jest playwright cypress authentication deploying production checklist static exports upgrading codemods app router migration version 14 migrating from vite migrating from create react app api reference components font image link script file conventions defaultjs errorjs instrumentationjs layoutjs loadingjs middlewarejs notfoundjs pagejs routejs route segment config templatejs metadata files favicon icon and appleicon manifestjson opengraphimage and twitterimage robotstxt sitemapxml functions cookies draftmode fetch generateimagemetadata generatemetadata generatesitemaps generatestaticparams generateviewport headers imageresponse nextrequest nextresponse notfound permanentredirect redirect revalidatepath revalidatetag unstable_cache unstable_nostore useparams usepathname usereportwebvitals userouter usesearchparams useselectedlayoutsegment useselectedlayoutsegments useragent nextconfigjs options appdir assetprefix basepath compress devindicators distdir env eslint exportpathmap generatebuildid generateetags headers httpagentoptions images cachehandler instrumentationhook logging mdxrs ondemandentries optimizepackageimports output pageextensions partial prerendering experimental poweredbyheader productionbrowsersourcemaps reactstrictmode redirects rewrites serveractions servercomponentsexternalpackages trailingslash transpilepackages turbo typedroutes typescript urlimports webpack webvitalsattribution createnextapp edge runtime nextjs cli building your application routing pages and layouts dynamic routes linking and navigating redirecting custom app custom document api routes custom errors internationalization middleware rendering serverside rendering ssr static site generation ssg automatic static optimization clientside rendering csr edge and nodejs runtimes data fetching getstaticprops getstaticpaths forms and mutations getserversideprops incremental static regeneration isr clientside fetching styling css modules tailwind css cssinjs sass optimizing images fonts scripts static assets bundle analyzer analytics lazy loading instrumentation opentelemetry third party libraries configuring typescript eslint environment variables absolute imports and module path aliases src directory mdx amp babel postcss custom server draft mode error handling debugging preview mode content security policy testing vitest jest playwright cypress authentication deploying production checklist static exports multi zones continuous integration ci build caching upgrading codemods from pages to app migrating from vite migrating from create react app version 14 version 13 version 12 version 11 version 10 version 9 api reference components font head image image legacy link script functions getinitialprops getserversideprops getstaticpaths getstaticprops nextrequest nextresponse useamp usereportwebvitals userouter useragent nextconfigjs options assetprefix basepath compress devindicators distdir env eslint exportpathmap generatebuildid generateetags headers httpagentoptions images instrumentationhook ondemandentries output pageextensions poweredbyheader productionbrowsersourcemaps reactstrictmode redirects rewrites runtime config trailingslash transpilepackages turbo typescript urlimports webpack webvitalsattribution createnextapp nextjs cli edge runtime architecture accessibility fast refresh nextjs compiler supported browsers turbopack community contribution guide on this page what is nextjs main features how to use these docs app router vs pages router prerequisite knowledge accessibility join our community edit this page on github scroll to top introduction welcome to the nextjs documentation what is nextjs nextjs is a react framework for building fullstack web applications you use react components to build user interfaces and nextjs for additional features and optimizations under the hood nextjs also abstracts and automatically configures tooling needed for react like bundling compiling and more this allows you to focus on building your application instead of spending time with configuration whether youre an individual developer or part of a larger team nextjs can help you build interactive dynamic and fast react applications main features some of the main nextjs features include feature description routing a filesystem based router built on top of server components that supports layouts nested routing loading states error handling and more rendering clientside and serverside rendering with client and server components further optimized with static and dynamic rendering on the server with nextjs streaming on edge and nodejs runtimes data fetching simplified data fetching with asyncawait in server components and an extended fetch api for request memoization data caching and revalidation styling support for your preferred styling methods including css modules tailwind css and cssinjs optimizations image fonts and script optimizations to improve your applications core web vitals and user experience typescript improved support for typescript with better type checking and more efficient compilation as well as custom typescript plugin and type checker how to use these docs on the left side of the screen youll find the docs navbar the pages of the docs are organized sequentially from basic to advanced so you can follow them stepbystep when building your application however you can read them in any order or skip to the pages that apply to your use case on the right side of the screen youll see a table of contents that makes it easier to navigate between sections of a page if you need to quickly find a page you can use the search bar at the top or the search shortcut ctrlk or cmdk to get started checkout the installation guide app router vs pages router nextjs has two different routers the app router and the pages router the app router is a newer router that allows you to use reacts latest features such as server components and streaming the pages router is the original nextjs router which allowed you to build serverrendered react applications and continues to be supported for older nextjs applications at the top of the sidebar youll notice a dropdown menu that allows you to switch between the app router and the pages router features since there are features that are unique to each directory its important to keep track of which tab is selected the breadcrumbs at the top of the page will also indicate whether youre viewing app router docs or pages router docs prerequisite knowledge although our docs are designed to be beginnerfriendly we need to establish a baseline so that the docs can stay focused on nextjs functionality well make sure to provide links to relevant documentation whenever we introduce a new concept to get the most out of our docs its recommended that you have a basic understanding of html css and react if you need to brush up on your react skills check out our react foundations course which will introduce you to the fundamentals then learn more about nextjs by building a dashboard application accessibility for optimal accessibility when using a screen reader while reading the docs we recommend using firefox and nvda or safari and voiceover join our community if you have questions about anything related to nextjs youre always welcome to ask our community on github discussions discord twitter and reddit getting started learn how to create fullstack web applications with nextjs app router use the new app router with nextjs and reacts latest features including layouts server components suspense and more pages router before nextjs 13 the pages router was the main way to create routes in nextjs with an intuitive filesystem router architecture how nextjs works community get involved in the nextjs community next installation was this helpful supported send resources docs learn showcase blog analytics nextjs conf dx platform more nextjs commerce contact sales github releases telemetry governance about vercel nextjs vercel open source software github x legal privacy policy cookie preferences subscribe to our newsletter stay updated on new releases and features guides and case studies subscribe 2024 vercel inc html index nodejs v2162 documentation nodejs about this documentation usage and example assertion testing asynchronous context tracking async hooks buffer c addons cc addons with nodeapi c embedder api child processes cluster commandline options console corepack crypto debugger deprecated apis diagnostics channel dns domain errors events file system globals http http2 https inspector internationalization modules commonjs modules modules ecmascript modules modules nodemodule api modules packages net os path performance hooks permissions process punycode query strings readline repl report single executable applications stream string decoder test runner timers tlsssl trace events tty udpdatagram url utilities v8 vm wasi web crypto api web streams api worker threads zlib code repository and issue tracker nodejs v2162 documentation nodejs v2162 other versions 21x 20x lts 19x 18x lts 17x 16x 15x 14x 13x 12x 11x 10x 9x 8x 7x 6x 5x 4x 012x 010x options view on single page view as json edit on github toc nbchrisdickinson if you move this file be sure to update toolsdochtmlmjs to point at the new location introduced_inv0100 about this documentation usage and example assertion testing asynchronous context tracking async hooks buffer c addons cc addons with nodeapi c embedder api child processes cluster commandline options console corepack crypto debugger deprecated apis diagnostics channel dns domain errors events file system globals http http2 https inspector internationalization modules commonjs modules modules ecmascript modules modules nodemodule api modules packages net os path performance hooks permissions process punycode query strings readline repl report single executable applications stream string decoder test runner timers tlsssl trace events tty udpdatagram url utilities v8 vm wasi web crypto api web streams api worker threads zlib code repository and issue tracker api end html npm docs skip to search skip to content npm docs npmjscom status support site navigation about npm getting started setting up your npm user account creating a new user account on the public registry creating a strong password receiving a onetime password over email about twofactor authentication configuring twofactor authentication accessing npm using twofactor authentication recovering your 2faenabled account managing your npm user account managing your profile settings changing your npm username deleting your npm user account requesting an export of your personal data paying for your npm user account upgrading to a paid user account plan viewing downloading and emailing receipts for your npm user account updating user account billing settings downgrading to a free user account plan configuring your local environment about npm cli versions downloading and installing nodejs and npm troubleshooting generating and locating npmdebuglog files common errors try the latest stable version of node try the latest stable version of npm packages and modules introduction to packages and modules about the public npm registry about packages and modules about scopes about public packages about private packages npm package scope access level and visibility contributing packages to the registry creating a packagejson file creating nodejs modules about package readme files creating and publishing unscoped public packages creating and publishing scoped public packages creating and publishing private packages package name guidelines specifying dependencies and devdependencies in a packagejson file about semantic versioning adding disttags to packages updating and managing your published packages changing package visibility adding collaborators to private packages owned by a user account updating your published package version number deprecating and undeprecating packages or package versions transferring a package from a user account to another user account unpublishing packages from the registry getting packages from the registry searching for and choosing packages to download downloading and installing packages locally downloading and installing packages globally resolving eacces permissions errors when installing packages globally updating packages downloaded from the registry using npm packages in your projects using deprecated packages uninstalling packages and dependencies securing your code about audit reports auditing package dependencies for security vulnerabilities generating provenance statements about ecdsa registry signatures verifying ecdsa registry signatures requiring 2fa for package publishing and settings modification reporting malware in an npm package integrations integrating npm with external services about access tokens creating and viewing access tokens revoking access tokens using private packages in a cicd workflow docker and private modules organizations creating and managing organizations creating an organization converting your user account to an organization requiring twofactor authentication in your organization renaming an organization deleting an organization paying for your organization upgrading to a paid organization plan viewing downloading and emailing receipts for your organization updating organization billing settings downgrading to a free organization plan managing organization members adding members to your organization accepting or rejecting an organization invitation organization roles and permissions managing organization permissions removing members from your organization managing teams about the developers team creating teams adding organization members to teams removing organization members from teams managing team access to organization packages removing teams managing organization packages about organization scopes and packages configuring your npm client with your organization settings creating and publishing an organization scoped package policies terms of use open source terms private terms code of conduct package name disputes npm license privacy policy unpublish policy copyright and dmca policy logos and usage security replication and web crawler policy threats and mitigations npm cli cli commands npm npm access npm adduser npm audit npm bugs npm cache npm ci npm completion npm config npm dedupe npm deprecate npm diff npm disttag npm docs npm doctor npm edit npm exec npm explain npm explore npm finddupes npm fund npm help npm helpsearch npm hook npm init npm install npm installcitest npm installtest npm link npm login npm logout npm ls npm org npm outdated npm owner npm pack npm ping npm pkg npm prefix npm profile npm prune npm publish npm query npm rebuild npm repo npm restart npm root npm runscript npm sbom npm search npm shrinkwrap npm star npm stars npm start npm stop npm team npm test npm token npm uninstall npm unpublish npm unstar npm update npm version npm view npm whoami npx configuring npm install folders npmrc npmshrinkwrapjson packagejson packagelockjson using npm registry package spec config logging scope scripts workspaces organizations dependency selectors developers removal changelog npmjscom status support github npm docs documentation for the npm registry website and commandline interface about npm getting started packages and modules integrations organizations policies threats and mitigations npm cli slicestart id_gatsbyscripts1 sliceend id_gatsbyscripts1html react reference overview react join us for react conf on may 1516 learn more react search ctrl k learn reference community blog react1820 overview hooks use this feature is available in the latest canary usecallback usecontext usedebugvalue usedeferredvalue useeffect useid useimperativehandle useinsertioneffect uselayouteffect usememo useoptimistic this feature is available in the latest canary usereducer useref usestate usesyncexternalstore usetransition components fragment profiler strictmode suspense apis cache this feature is available in the latest canary createcontext forwardref lazy memo starttransition experimental_taintobjectreference this feature is available in the latest canary experimental_taintuniquevalue this feature is available in the latest canary directives this feature is available in the latest canary use client this feature is available in the latest canary use server this feature is available in the latest canary reactdom1820 hooks useformstate this feature is available in the latest canary useformstatus this feature is available in the latest canary components common eg div form this feature is available in the latest canary input option progress select textarea link this feature is available in the latest canary meta this feature is available in the latest canary script this feature is available in the latest canary style this feature is available in the latest canary title this feature is available in the latest canary apis createportal flushsync finddomnode hydrate preconnect this feature is available in the latest canary prefetchdns this feature is available in the latest canary preinit this feature is available in the latest canary preinitmodule this feature is available in the latest canary preload this feature is available in the latest canary preloadmodule this feature is available in the latest canary render unmountcomponentatnode client apis createroot hydrateroot server apis rendertonodestream rendertopipeablestream rendertoreadablestream rendertostaticmarkup rendertostaticnodestream rendertostring legacy apis legacy react apis children cloneelement component createelement createfactory createref isvalidelement purecomponent is this page useful api reference react reference overview this section provides detailed reference documentation for working with react for an introduction to react please visit the learn section the react reference documentation is broken down into functional subsections react programmatic react features hooks use different react features from your components components documents builtin components that you can use in your jsx apis apis that are useful for defining components directives provide instructions to bundlers compatible with react server components react dom reactdom contains features that are only supported for web applications which run in the browser dom environment this section is broken into the following hooks hooks for web applications which run in the browser dom environment components react supports all of the browser builtin html and svg components apis the reactdom package contains methods supported only in web applications client apis the reactdomclient apis let you render react components on the client in the browser server apis the reactdomserver apis let you render react components to html on the server legacy apis legacy apis exported from the react package but not recommended for use in newly written code next hooks how do you like these docs take our survey 2024 learn react quick start installation describing the ui adding interactivity managing state escape hatches api reference react apis react dom apis community code of conduct meet the team docs contributors acknowledgements more blog react native privacy terms on this page overview react react dom legacy apishtml installation tailwind css tailwind css home page v341 tailwind css v34 dynamic viewport units has subgrid and more docs components blog showcase theme tailwind css on github search navigation navigation getting started installation quick search documentation components templates screencasts playground resources community getting started installation editor setup using with preprocessors optimizing for production browser support upgrade guide core concepts utilityfirst fundamentals hover focus and other states responsive design dark mode reusing styles adding custom styles functions directives customization configuration content theme screens colors spacing plugins presets base styles preflight layout aspect ratio container columns break after break before break inside box decoration break box sizing display floats clear isolation object fit object position overflow overscroll behavior position top right bottom left visibility zindex flexbox grid flex basis flex direction flex wrap flex flex grow flex shrink order grid template columns grid column start end grid template rows grid row start end grid auto flow grid auto columns grid auto rows gap justify content justify items justify self align content align items align self place content place items place self spacing padding margin space between sizing width minwidth maxwidth height minheight maxheight size typography font family font size font smoothing font style font weight font variant numeric letter spacing line clamp line height list style image list style position list style type text align text color text decoration text decoration color text decoration style text decoration thickness text underline offset text transform text overflow text wrap text indent vertical align whitespace word break hyphens content backgrounds background attachment background clip background color background origin background position background repeat background size background image gradient color stops borders border radius border width border color border style divide width divide color divide style outline width outline color outline style outline offset ring width ring color ring offset width ring offset color effects box shadow box shadow color opacity mix blend mode background blend mode filters blur brightness contrast drop shadow grayscale hue rotate invert saturate sepia backdrop blur backdrop brightness backdrop contrast backdrop grayscale backdrop hue rotate backdrop invert backdrop opacity backdrop saturate backdrop sepia tables border collapse border spacing table layout caption side transitions animation transition property transition duration transition timing function transition delay animation transforms scale rotate translate skew transform origin interactivity accent color appearance cursor caret color pointer events resize scroll behavior scroll margin scroll padding scroll snap align scroll snap stop scroll snap type touch action user select will change svg fill stroke stroke width accessibility screen readers forced color adjust official plugins typography forms aspect ratio container queries installation get started with tailwind css tailwind css works by scanning all of your html files javascript components and any other templates for class names generating the corresponding styles and then writing them to a static css file its fast flexible and reliable with zeroruntime installation tailwind cli using postcss framework guides play cdn installing tailwind cli the simplest and fastest way to get up and running with tailwind css from scratch is with the tailwind cli tool the cli is also available as a standalone executable if you want to use it without installing nodejs install tailwind css install tailwindcss via npm and create your tailwindconfigjs file terminal npm install d tailwindcss npx tailwindcss init configure your template paths add the paths to all of your template files in your tailwindconfigjs file tailwindconfigjs type import tailwindcss config module exports content srchtmljs theme extend plugins add the tailwind directives to your css add the tailwind directives for each of tailwinds layers to your main css file srcinputcss tailwind base tailwind components tailwind utilities start the tailwind cli build process run the cli tool to scan your template files for classes and build your css terminal npx tailwindcss i srcinputcss o srcoutputcss watch start using tailwind in your html add your compiled css file to the head and start using tailwinds utility classes to style your content srcindexhtml doctype html html head meta charset utf8 meta name viewport content widthdevicewidth initialscale10 link href outputcss rel stylesheet head body h1 class text3xl fontbold underline hello world h1 body html what to read next get familiar with some of the core concepts that make tailwind css different from writing traditional css utilityfirst fundamentals using a utilityfirst workflow to build complex components from a constrained set of primitive utilities responsive design build fully responsive user interfaces that adapt to any screen size using responsive modifiers hover focus other states style elements in interactive states like hover focus and more using conditional modifiers dark mode optimize your site for dark mode directly in your html using the dark mode modifier reusing styles manage duplication and keep your projects maintainable by creating reusable abstractions customizing the framework customize the framework to match your brand and extend it with your own custom styles copyright 2024 tailwind labs inc trademark policy github discord cells cell_type code execution_count 1 id 385686fc454b4b0ebb94023d10f722f7 metadata outputs ename modulenotfounderror evalue no module named pandas output_type error traceback u001b131mu001b0m u001b131mmodulenotfounderroru001b0m traceback most recent call last cell u001b132min1 line 1u001b0mnu001b132m 1u001b0m u001b3852801mimportu001b3900m u001b3852101mpandasu001b3900m u001b3852801masu001b3900m u001b3852101mpdu001b3900mnu001b032m 3u001b0m u001b3856603m read the csv file into a dataframeu001b3900mnu001b032m 4u001b0m df u001b385241mu001b39m pdu001b385241mu001b39mread_csvu001b385124mu001b39mu001b385124maxiostxtu001b39mu001b385124mu001b39mn u001b131mmodulenotfounderroru001b0m no module named pandas source import pandas as pdn n read the csv file into a dataframen df pdread_csvaxiostxtn cell_type code execution_count 3 id 13ca657ca5df4baaa1f0e9d0ff969d21 metadata outputs name stdout output_type stream text requirement already satisfied pandas in cusersvibhanshu jainappdatalocalprogramspythonpython311libsitepackages 220n requirement already satisfied numpy21232 in cusersvibhanshu jainappdatalocalprogramspythonpython311libsitepackages from pandas 1264n requirement already satisfied pythondateutil282 in cusersvibhanshu jainappdatalocalprogramspythonpython311libsitepackages from pandas 282n requirement already satisfied pytz20201 in cusersvibhanshu jainappdatalocalprogramspythonpython311libsitepackages from pandas 20241n requirement already satisfied tzdata20227 in cusersvibhanshu jainappdatalocalprogramspythonpython311libsitepackages from pandas 20241n requirement already satisfied six15 in cusersvibhanshu jainappdatalocalprogramspythonpython311libsitepackages from pythondateutil282pandas 1160n note you may need to restart the kernel to use updated packagesn name stderr output_type stream text n notice a new release of pip is available 2332 240n notice to update run pythonexe m pip install upgrade pipn source pip install pandasn cell_type code execution_count 4 id 755072e5b70e432a84df1a3e6875ad9b metadata outputs name stderr output_type stream text cusersvibhanshu jainappdatalocaltempipykernel_247884080736814py1 deprecationwarning n pyarrow will become a required dependency of pandas in the next major release of pandas pandas 30n to allow more performant data types such as the arrow string type and better interoperability with other librariesn but was not found to be installed on your systemn if this would cause problems for youn please provide us feedback at httpsgithubcompandasdevpandasissues54466n n import pandas as pdn source import pandas as pd cell_type raw id 29009c9f0bd5430db6bd6818cc0bf2ed metadata source import pandas as pdn n read the csv file into a dataframen df pdread_csvaxiostxt metadata kernelspec display_name python 3 ipykernel language python name python3 language_info codemirror_mode name ipython version 3 file_extension py mimetype textxpython name python nbconvert_exporter python pygments_lexer ipython3 version 3114 nbformat 4 nbformat_minor 5 html getting started vite skip to content vite search k main navigation guide config plugins resources team blog releases twitter discord chat awesome vite viteconf dev community changelog contributing version vite 4 docs vite 3 docs vite 2 docs english 简体中文 日本語 español português 한국어 deutsch english 简体中文 日本語 español português 한국어 deutsch appearance menu return to top sidebar navigation guide why vite getting started features cli using plugins dependency prebundling static asset handling building for production deploying a static site env variables and modes serverside rendering ssr backend integration comparisons troubleshooting performance philosophy migration from v4 apis plugin api hmr api javascript api vite runtime api config reference on this page table of contents for current page beyond fast viteconf 2023 watch the replay getting started overview vite french word for quick pronounced vit like veet is a build tool that aims to provide a faster and leaner development experience for modern web projects it consists of two major parts a dev server that provides rich feature enhancements over native es modules for example extremely fast hot module replacement hmr a build command that bundles your code with rollup preconfigured to output highly optimized static assets for production vite is opinionated and comes with sensible defaults out of the box read about whats possible in the features guide support for frameworks or integration with other tools is possible through plugins the config section explains how to adapt vite to your project if needed vite is also highly extensible via its plugin api and javascript api with full typing support you can learn more about the rationale behind the project in the why vite section browser support during development vite sets esnext as the transform target because we assume a modern browser is used and it supports all of the latest javascript and css features this prevents syntax lowering letting vite serve modules as close as possible to the original source code for the production build by default vite targets browsers that support native es modules native esm dynamic import and importmeta legacy browsers can be supported via the official vitejspluginlegacy see the building for production section for more details trying vite online you can try vite online on stackblitz it runs the vitebased build setup directly in the browser so it is almost identical to the local setup but doesnt require installing anything on your machine you can navigate to vitenewtemplate to select which framework to use the supported template presets are javascript typescript vanilla vanillats vue vuets react reactts preact preactts lit litts svelte sveltets solid solidts qwik qwikts scaffolding your first vite project compatibility note vite requires nodejs version 18 20 however some templates require a higher nodejs version to work please upgrade if your package manager warns about it npm yarn pnpm bun bash npm create vitelatest bash yarn create vite bash pnpm create vite bash bun create vite then follow the prompts you can also directly specify the project name and the template you want to use via additional command line options for example to scaffold a vite vue project run bash npm 7 extra doubledash is needed npm create vitelatest myvueapp template vue yarn yarn create vite myvueapp template vue pnpm pnpm create vite myvueapp template vue bun bun create vite myvueapp template vue see createvite for more details on each supported template vanilla vanillats vue vuets react reactts reactswc reactswcts preact preactts lit litts svelte sveltets solid solidts qwik qwikts community templates createvite is a tool to quickly start a project from a basic template for popular frameworks check out awesome vite for community maintained templates that include other tools or target different frameworks for a template at httpsgithubcomuserproject you can try it out online using httpsgithubstackblitzcomuserproject adding stackblitz after github to the url of the project you can also use a tool like degit to scaffold your project with one of the templates assuming the project is on github and uses main as the default branch you can create a local copy using bash npx degit userprojectmain myproject cd myproject npm install npm run dev indexhtml and project root one thing you may have noticed is that in a vite project indexhtml is frontandcentral instead of being tucked away inside public this is intentional during development vite is a server and indexhtml is the entry point to your application vite treats indexhtml as source code and part of the module graph it resolves script typemodule src that references your javascript source code even inline script typemodule and css referenced via link href also enjoy vitespecific features in addition urls inside indexhtml are automatically rebased so theres no need for special public_url placeholders similar to static http servers vite has the concept of a root directory which your files are served from you will see it referenced as root throughout the rest of the docs absolute urls in your source code will be resolved using the project root as base so you can write code as if you are working with a normal static file server except way more powerful vite is also capable of handling dependencies that resolve to outofroot file system locations which makes it usable even in a monorepobased setup vite also supports multipage apps with multiple html entry points specifying alternative root running vite starts the dev server using the current working directory as root you can specify an alternative root with vite serve somesubdir note that vite will also resolve its config file ie viteconfigjs inside the project root so youll need to move it if the root is changed command line interface in a project where vite is installed you can use the vite binary in your npm scripts or run it directly with npx vite here are the default npm scripts in a scaffolded vite project json scripts dev vite start dev server aliases vite dev vite serve build vite build build for production preview vite preview locally preview production build you can specify additional cli options like port or open for a full list of cli options run npx vite help in your project learn more about the command line interface using unreleased commits if you cant wait for a new release to test the latest features you will need to clone the vite repo to your local machine and then build and link it yourself pnpm is required bash git clone httpsgithubcomvitejsvitegit cd vite pnpm install cd packagesvite pnpm run build pnpm link global use your preferred package manager for this step then go to your vite based project and run pnpm link global vite or the package manager that you used to link vite globally now restart the development server to ride on the bleeding edge community if you have questions or need help reach out to the community at discord and github discussions suggest changes to this page previous page why vite next page features released under the mit license 7b9e927a copyright 2019present evan you vite contributors